[ { "title": "sshpass 설치 및 사용법", "url": "/posts/sshpass-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95/", "categories": "OS, Linux", "tags": "linux, macos, ssh", "date": "2022-05-27 21:26:00 +0900", "snippet": "sshpass란 SSHPass는 클라이언트에서 서버로 ssh 접속 시 패스워드 요구 없이 할 수 있는 도구입니다. 클라이언트에서 키 생성(ssh-keygen)하여 서버로 배포(ssh-copy-id)합니다. ssh, scp 수행 시 배치모드로 패스워드를 전달하거나 스크립트에 패스워드를 기재하여 접속이 가능합니다.설치LINUX# Ubuntuapt-get install sshpass# RHEL/CentOSyum install sshpassmacOSHomebrew에서는 공식적으로 SSHPass 지원을 하지 않으므로 아래 명령어로 직접 다운로드 및 설치를 진행합니다.curl -O -L [https://fossies.org/linux/privat/sshpass-1.09.tar.gz](https://fossies.org/linux/privat/sshpass-1.09.tar.gz) &amp;amp;&amp;amp; tar xvzf sshpass-1.09.tar.gzcd sshpass-1.09./configuresudo make installsshpass개인키, 공개키 생성ssh-keygen 명령어를 사용하여 Private/Public 키 쌍을 생성하여 아래 경로에 저장합니다. Private(개인키) : ~/.ssh/id_rsa Public(공개키) : ~/.ssh/id_rsa.pubssh-keygen Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: ed:6b:78:50:2d:69:0b:0d:19:f4:bf:97:ae:a3:bb:30 root@123.45.67.89 The key&#39;s randomart image is: +--[ RSA 2048]----+ | .oo | | o. | | o.o | | ..*.. | | S+.o. | | ... . . | | Eo. . o | | .oo..o | | o=+.o. | +-----------------+ssh 접속sshpass -p &quot;패스워드&quot; ssh -o StrictHostKeyChecking=no -p &quot;포트&quot; &quot;ID&quot;@&quot;서버 주소&quot;# 예시sshpass -pP@ssw0rd ssh -o StrictHostKeyChecking=no -p22 test@123.45.67.89 SSH 포트가 22인 경우 -p 옵션 생략 가능서버에 공개키 배포하기sshpass -p &quot;패스워드&quot; ssh-copy-id -p &quot;포트&quot; &quot;ID&quot;@&quot;서버 주소&quot;# 예시sshpass -pP@ssw0rd ssh-copy-id test@123.45.67.102서버에 해당 계정에 대한 공개키 배포 후 접속ssh &quot;서버 주소&quot;ssh 명령어 실행sshpass -p &quot;패스워드&quot; ssh -o StrictHostKeyChecking=no &quot;ID&quot;@&quot;서버 주소&quot; &quot;명령어&quot;# 예시sshpass -pP@ssw0rd ssh -o StrictHostKeyChecking=no test@123.45.67.89 hostnamescp 파일 전송sshpass -p &quot;패스워드&quot; scp -o StrictHostKeyChecking=no &quot;로컬 파일경로&quot; &quot;ID&quot;@&quot;서버 주소&quot;:&quot;서버 파일경로&quot;# 예시sshpass -pP@ssw0rd scp -o StrictHostKeyChecking=no hello.txt test@123.45.67.89:/home/test/hello.txt" }, { "title": "맥 zsh + Oh My Zsh + iTerm2 세팅", "url": "/posts/%EB%A7%A5-zsh-Oh-My-Zsh-iTerm2-%EC%84%B8%ED%8C%85/", "categories": "OS, MacOS", "tags": "macos, zsh, oh-my-zsh, iterm", "date": "2022-05-09 01:12:00 +0900", "snippet": "설치1. zsh 설치zsh를 HomeBrew로 설치합니다.brew install zsh2. 설치경로 확인which zsh#=&amp;gt; /usr/bin/zsh3. 기본 sh 변경chsh -s $(which zsh)4. curl 설치brew install curl5. oh-my-zsh 설치sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;6. iterm2 설치brew install --cask iterm2설정zsh 설정vim ~/.zshrc # 테마 변경 (agnoster테마는 현재 디렉토리에서 Git의 상태를 알려줌) ZSH_THEME=&quot;agnoster&quot;source ~/.zshrcD2코딩 폰트 설치아래 파일을 다운로드 받은 후 macOS에 폰트를 설치합니다. D2Coding-Ver1.3.2-20180524-all.ttciterm2 테마 설치 iterm에서 Cmd + ,를 누르면 설정 화면 → Profile Text에서 D2코딩 폰트를 적용합니다. 테마 파일 다운로드 후 압축 해제합니다. schemes.zip Colors → Color Presets → Import → 압축 해제한 테마 폴더를 추가합니다. 테마를 선택하여 적용합니다." }, { "title": "XCP-ng ISO 저장소 생성 및 갱신 방법", "url": "/posts/XenServer-XCP-ng-ISO-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EA%B0%B1%EC%8B%A0/", "categories": "OS, Linux", "tags": "xcp-ng, xenserver", "date": "2022-05-05 11:12:00 +0900", "snippet": "저장소 생성XenServer 및 XCP-ng에서 운영체제를 설치할 ISO 파일을 사용하기 위해서는 먼저 ISO 저장소를 생성해야 합니다. sr-create 명령어를 사용하여 아래와 같이 옵션을 입력하고 저장소를 생성합니다. xe sr-create name-label=&amp;lt;name&amp;gt; type=iso \\ device-config:location=&amp;lt;where iso file exist&amp;gt; \\ device-config:legacy_mode=true \\ content-type=iso # 예 (xe의 위치가 /var/opt/xen/iso_import/xe인 경우) /var/opt/xen/iso_import/xe sr-create name-label=windows_iso type=iso \\ device-config:location=/var/opt/xen/iso_import/ \\ device-config:legacy_mode=true content-type=iso 저장소 생성 후 sr-list 명령어를 사용하여 저장소 내의 ISO 파일의 UUID 등 정보를 조회할 수 있습니다. xe sr-list name-label=windows_iso uuid ( RO): 7bdf8f9c-ba67-eeba-ff59-ec590f8f3692 name-label ( RW): iso-file name-description ( RW): host ( RO): xen12 type ( RO): iso content-type ( RO): iso 파일 업로드 파일질라와 같은 SFTP 툴을 이용해서 ISO 파일을 /var/opt/xen/iso_import 디렉토리에 업로드합니다. sr-list 명령어로 업로드된 파일의 UUID를 조회합니다. 업로드한 파일의 UUID와 sr-scan 명령어로 저장소를 재스캔하도록 합니다.xe sr-scan uuid=7bdf8f9c-ba67-eeba-ff59-ec590f8f3692" }, { "title": "Linux 윈도우 공유폴더 마운트", "url": "/posts/Linux-%EC%9C%88%EB%8F%84%EC%9A%B0-%EA%B3%B5%EC%9C%A0%ED%8F%B4%EB%8D%94-%EB%A7%88%EC%9A%B4%ED%8A%B8/", "categories": "OS, Linux", "tags": "linux, windows, 공유폴더", "date": "2022-05-05 08:02:32 +0900", "snippet": "윈도우 공유폴더에 바로 연결마운트mount -t cifs -o vers=2.0 //[호스트주소]/[폴더] /backup -ousername=[아이디],password=[비밀번호]확인df -h재부팅 시 자동 연결 (재부팅 시 시간이 오래 걸리므로 비추천)/etc/fstab 설정 파일에 내용 추가vim /etc/fstab mount -t cifs -o vers=2.0 //[호스트주소]/[폴더] /backup -o username=[아이디],password=[비밀번호]마운트mount /backup확인df -h마운트 해제umount /backupTrouble ShootingTarget is busyfuser -ck /backup (사용하고 있는 User의 프로세스 kill) 또는 umount -l /backup" }, { "title": "Linux Rsync 설정", "url": "/posts/Linux-Rsync-%EC%84%A4%EC%A0%95/", "categories": "OS, Linux", "tags": "linux, rsync", "date": "2022-05-05 06:44:40 +0900", "snippet": "rsync 사용법rsync 명령어는 원본데이터가 있는 서버에서 백업서버로 하는 것이 아닌, 백업서버에서 원본데이터가 있는 서버로 접근하는 방식입니다.기본 명령어 파라미터rsync [옵션] [백업할원본의주소:경로] [백업받을경로] -a : 심볼릭링크, 속성, 퍼미션, 소유권 등 보존 -v : 진행상황을 상세하게 보여줌 -z : 전송시 압축을 함 -u : 새로운 파일을 덮어쓰지 않음 –delete : 서버 쪽에 없고 클라이언트 쪽에만 있는 파일을 백업시 지움 –progress : 진행을 %로 보여줌 –stats : 상태 출력 –log-file=/home/util/file.log : 로그 남기기rsync -avPz -l -t -e ssh 계정명@원본호스트주소:원본경로/ 목적지경로# **백업할 원본의 주소는 반드시 마지막에 슬래시(/) 붙이기**# **SSH 기본 포트(22)가 아닐 때 : &quot;ssh -p 포트번호&quot; 반드시 큰따옴표 붙이기**rsync -avPz --stats -l -t -e &quot;ssh -p 포트번호&quot; 계정명@원본호스트주소:원본경로/ 목적지경로rsync 자동 스크립트rsync 명령어는 ssh 접속처럼 사용자의 비밀번호를 입력받은 후 작동하므로 자동화 스크립트는 콘솔 입력을 받을 수 있는 expect를 사용해야 합니다expect 설치yum install expect스크립트 작성#!/usr/bin/expectset timeout -1log_user 0spawn rsync -avPz -l -t -e ssh 계정명@원본호스트주소:원본경로/ 목적지경로expect &quot;password: &quot;send &quot;계정패스워드&quot;log_user 1interact스케쥴러(crontab) 등록용 스크립트 작성 맨 마지막 명령어인 interact가 사용자에게 권한을 반환하는 명령어이므로 Crontab에서는 오류가 발생합니다 맨 마지막 interact 대신에 expect eof를 추가하여 스크립트를 작성합니다. #!/usr/bin/expectset timeout -1log_user 0spawn rsync -avPz -l -t -e ssh 계정명@원본호스트주소:원본경로/ 목적지경로expect &quot;password: &quot;send &quot;계정패스워드&quot;log_user 1expect eof " }, { "title": "CentOS Python 환경 구축", "url": "/posts/CentOS-Python-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95/", "categories": "OS, Linux", "tags": "linux, centos, python", "date": "2022-05-05 06:13:03 +0900", "snippet": "설치 CentOS 6.x에서는 repo 지원이 끊겼으므로 곧바로 컴파일 설치를 해야 합니다필수 패키지 설치yum install -y openssl openssl-dev gcc gcc-c++1. 컴파일 설치yum과 같은 패키지 매니저를 통한 설치가 불가능한 경우 직접 파일을 다운로드 받아 컴파일 설치합니다다운로드 및 압축 해제⬇️ Python 다운로드 URL : https://www.python.org/ftp/python/wget [https://www.python.org/ftp/python/](https://www.python.org/ftp/python/)3.6.9/Python-3.6.9.tgztar zxvf Python-3.6.9.tgz(선택) OpenSSL이 컴파일로 설치된 경우Configure 하기 전에 Modules/Setup.dist 파일을 수정해줍니다.cd Python-3.6.9/Modulesvim Setup.dist # 아래와 같이 주석을 풀어준다. _socket socketmodule.c # Socket module helper for SSL support; you must comment out the other # socket line above, and possibly edit the SSL variable: SSL=/usr/local/openssl _ssl _ssl.c \\ -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\ -L$(SSL)/lib -lssl -lcrypto환경 구성cd Python-3.6.9./configure --enable-optimizations --prefix=/usr/local/python3.6# 위의 SSL 설정했을 시 아래 내용 추가--with-ensurepip=yes CFLAGS=&quot;-I/usr/local/ssl/include&quot; LDFLAGS=&quot;-L/usr/local/ssl/lib&quot;설치### CPU 코어 수 확인grep -c processor /proc/cpuinfomake -j [코어 수]make altinstall버전 확인/usr/local/python3.6/bin/python3.6 -VAlias 수정### 설치된 위치 확인which python3.6### 기존 Python 링크 확인 및 수정cd /usr/binls -al | grep pythonln -s /usr/local/bin/python3.6 python2. 패키지 설치 (yum)yum 사용이 가능한 환경에서는 간편하게 패키지 설치합니다Repository 추가yum install -y https://repo.ius.io/ius-release-el7.rpm패키지 설치yum install -y python36u python36u-libs python36u-devel python36u-pip버전 확인python3 -V3. 가상환경 구성pip(Python Index Package)는 root 디렉토리가 디폴트로 설정되어 있으므로, root 또는 sudo로 계속하여 사용하는 것은 위험합니다. 가상환경 라이브러리인 Virutalenv를 사용하여 가상 사용자의 Home 디렉토리에서 패키지를 관리하는 것이 바람직한 방법입니다.가상환경 라이브러리 설치pip install virtualenv가상환경 활성화virtualenv [사용자명]source [사용자명]/bin/activate가상환경에서 원하는 패키지 설치(사용자명)# pip install 서비스# 패키지 설치 디렉토리 : [사용자홈]/lib/python3.6/# 패키지 실행 디렉토리 : [사용자홈]/bin/python3.6/가상환경 비활성화deactivateTrouble Shooting세그멘테이션 오류 : Segmentaion Faultpython3 -m pip install sentencepiece" }, { "title": "CentOS 초기 설정", "url": "/posts/CentOS-%EC%B4%88%EA%B8%B0-%EC%84%A4%EC%A0%95/", "categories": "OS, Linux", "tags": "linux, centos, setting", "date": "2022-05-04 00:05:58 +0900", "snippet": "운영체제 설치 후 필수 설정1. CentOS 시스템 정보 확인시스템 정보 확인uname -aOS 버전 확인cat /etc/redhat-release2. Profile 설정사용자의 History에 날짜와 시간을 표시하도록 설정합니다.sed -i &quot;/HISTSIZE=1000/a\\HISTTIMEFORMAT=&#39;%F %T ---&#39;&quot; /etc/profile3. 시스템 시간 설정rm /etc/localtimeln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime시스템 시간 확인 (KST임을 확인)date 2022. 05. 03. (화) 23:09:25 KST4. Hostname 변경CentOS 6vim /etc/sysconfig/network HOSTNAME=호스트명CentOS 7hostnamectl set-hostname 호스트명 --staticcat /etc/hostname5. SELinux 해제SELinux(Security Enhanced Linux)는 리눅스의 보안을 강화시켜주는 보안 커널이지만 강력한 보안 정책 때문에 실 서비스에 장애를 주는 현상이 많으므로 적절히 수정하거나 해제합니다.SELinux 상태 확인sestatus SELINUX=enableSELinux 해제해제 설정 후 시스템 재시작해야 적용됩니다.# 임시 중지 (재시작 후 다시 켜짐)setenforce 0# 영구 중지 (재시작 필요함)vim /etc/selinux/config SELINUX=disabled# 간단 명령어sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39; /etc/selinux/config# 재시작reboot6. 네트워크 설정네트워크 상태 확인 (네트워크 어댑터명 확인)ifconfigeth0 Link encap:Ethernet HWaddr A0:8C:FD:DC:0F:90 inet addr:192.168.1.203 Bcast:192.168.1.255 Mask:255.255.255.0 inet6 addr: fe80::a28c:fdff:fedc:f90/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:1208300569 errors:0 dropped:0 overruns:0 frame:0 TX packets:1220137358 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:109710700477 (102.1 GiB) TX bytes:1781122806279 (1.6 TiB)네트워크 설정네트워크 어댑터가 eth0인 경우 ifcfg-eth0 파일을 열어 설정합니다. ONBOOT 항목을 반드시 ‘yes’로 설정합니다.vim /etc/sysconfig/network-scripts/ifcfg-eth0 # DHCP인 경우 (IP 자동 할당) BOOTPROTO= dhcp ONBOOT= yes # 고정 IP를 설정할 경우 BOOTPROTO= static ONBOOT= yes IPADDR= 설정할 IP PREFIX= 서브넷마스크 # 24 = 255.255.255.0 GATEWAY= 라우터 IP DNS1= DNS 서버 IP DNS2= DNS 서버 IP네트워크 적용 및 재시작# CentOS 6service network restart# CentOS 7systemctl restart network7. 필수 패키지 설치패키지 매니저 yum의 레포지토리가 로컬이 아닌 이상 반드시 네트워크 연결 후 사용할 수 있습니다.필수 유틸yum -y install net-tools bind-utils wget elinks vim nmap psmisc gcc gcc-c++시스템 유틸yum -y install yum-utils sysstat system-config-firewall-tui8. ulimit 수정OS 레벨의 제한 설정을 필요시 적절하게 수정합니다.limits.conf 수정vim /etc/security/limits.conf # 전체 사용자의 nofile 옵션을 추가하고 저장 * soft nofile 65535 * hard nofile 65535# 재시작reboot적용된 내용 확인# soft ulimit 확인ulimit -a ... open files (-n) 65535# hard ulimit 확인ulimit -aH ... open files (-n) 655359. 계정 추가 및 삭제서비스 사용에 필요한 계정 및 그룹을 설정합니다.현재 시스템에 생성되어 있는 계정 및 그룹 확인cat /etc/passwdcat /etc/group# 특정 계정 확인grep 계정명 /etc/passwd그룹 추가groupadd 그룹명사용자 추가생성된 사용자의 기본 홈 디렉토리는 /home/사용자명입니다. useradd 사용자명 # 그룹을 설정하는 경우 useradd -g 그룹명 사용자명 # 홈 디렉토리를 임의 설정하는 경우 : 폴더는 미리 생성해야 한다 useradd -m -d 설정할경로 사용자명 # 기존 사용자의 홈 디렉토리를 변경하는 경우 usermod -d 변경할경로 사용자명사용자 비밀번호 설정passwd 사용자명불필요한 계정 삭제grep -e lp -e uucp -e nuucp /etc/passwduserdel lp &amp;amp;&amp;amp; userdel uucp &amp;amp;&amp;amp; userdel nuucp10. 방화벽 설정10.1. Firewall (CentOS 7) Firewall 기동 systemctl status firewalldsystemctl start firewalld Firewall 정책 확인 firewall-cmd --zone=public --list-ports Firewall 정책 설정 firewall-cmd --zone=public --add-port=9999/tcp Firewall 리로드 firewall-cmd --reload 10.2. Iptables (CentOS 6/7)CentOS 7 기존 Firewall 중지 systemctl stop firewalldsystemctl disable firewalldsystemctl mask firewalld Iptables 설치 및 기동 yum install iptables-servicessystemctl enable iptablessystemctl start iptables Iptables 기동 # CentOS 6service iptables start# CentOS 7systemctl start iptables Iptables 정책 확인 iptables -nL Iptables 정책 설정 vim /etc/sysconfig/iptables 에서 추가또는iptables -A INPUT -p tcp --dport 포트 -j ACCEPT# 정책 적용을 위한 서비스 재시작service iptables restartsystemctl restart iptables 선택 설정스케줄러 (크론탭) 설정# 크론탭 참조 경로 : /var/spool/cron# crontab 사용하고자 하는 user로 로그인 후crontab -e ## 분 시 일 월 요일 경로 로깅 0 2 * * * /Backup/bin/daily.sh 1&amp;gt;/dev/null 2&amp;gt;/dev/null 50 23 * * * crontab -l &amp;gt; /home/bak/crontab_bak.txt원격 데스크탑 설정유지보수를 위한 원격 데스크탑 설정이 필요시 RDP 프로토콜을 사용하기 위해 xrdp와 tigervnc-server를 설치해야 합니다.# EPEL Repository 및 xrdp, tigervnc-server 설치yum install epel-releaseyum install xrdp tigervnc-server# 자동 실행 등록chkconfig xrdp onchkconfig vncserver on-systemctl enable xrdpsystemctl enable vncserver# 방화벽 포트 등록(3389) 및 재시작iptables -A INPUT -p tcp –dport 3389 -j ACCEPTservice iptables restart-firewall-cmd --permanent --zone=public --add-port=3389/tcpfirewall-cmd --reload# 서비스 시작service xrdp start-systemctl start xrdpYum Local Repository 설정폐쇄망 환경에서는 인터넷을 통한 yum repository 사용이 불가능하므로, 설치 이미지에 포함되어 있던 패키지 라이브러리를 yum의 Local Repository로 설정해줍니다.# CentOS 이미지 마운트mkdir /root/isomount -o loop /root/CentOS.iso /root/iso# 이미지 내용 복사cp -rP /root/iso /root/repo# yum repo 폴더에 이미 정의된 파일들을 다른 곳으로 백업cd /etc/yum.repos.dmkdir backupmv /etc/yum.repos.d/*.repo backup# yum local repo 파일 추가vim /etc/yum.repos.d/local.repo [local-repository] name=local-repo baseurl=file:///root/repo gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY gpgcheck=1 enabled=1# yum repo 재인식yum clean allyum repolist# 설치 이미지 언마운트df -h # 마운트된 File System명 확인umount /dev/loop0" }, { "title": "MariaDB / MySQL 설치", "url": "/posts/MariaDB-MySQL-%EC%84%A4%EC%B9%98/", "categories": "DBMS, MariaDB/MySQL", "tags": "mariadb, mysql, db", "date": "2022-05-03 00:00:51 +0900", "snippet": "시험 환경 OS : CentOS 6.x / 7.x DB : MariaDB 10.0, 10.2 / MySQL 5.1, 5.7, 8.0 OS 설정1. ulimit 수정 현재 시스템 확인 vim /etc/security/limits.conf 전체 사용자의 nofile 옵션을 추가 * soft nofile 65535 * hard nofile 655352. Hostname 변경여러 대의 DB를 관리해야 하거나, 마스터-슬레이브 구조로 관리해야 될 때는 각 서버가 Hostname을 갖고 있는 것이 유리하다. CentOS 6.x vim /etc/sysconfig/network HOSTNAME=호스트네임 CentOS 7.x hostnamectl set-hostname 호스트네임 --static cat /etc/hostname reboot3. 서버 시간 설정 서버의 시간이 UTC로 설정된 경우 KST로 변경한다. (UTC는 KST보다 -9시간) rm /etc/localtime ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime 확인 및 재부팅 date 2021. 04. 28. (수) 10:29:51 KST reboot설치패키지 설치 MariaDB 버전별 RPM 다운로드 https://downloads.mariadb.org/mariadb/repositories/#mirror=yongbok MariaDB 버전별 OS 호환성 비교https://mariadb.com/docs/deploy/os-compatibility/#mariadb-community-server 1. [MariaDB] 저장소 추가CentOS 6.x 이하 또는 원하는 버전의 MariaDB를 설치해야 하는 경우 저장소 정보를 등록해야 한다. 저장소 정보 파일을 열거나 생성한다. vim /etc/yum.repos.d/MariaDB.repo 아래 내용을 추가한다. ## MariaDB 10.2 # MariaDB 10.2 CentOS repository list - created 2018-01-11 07:40 UTC # http://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.2/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1- baseurl : 본인이 원하는 스펙의 URL - 10.2 : 설치할 MariaDB의 버전 - centos7-amd64 : 현재 리눅스 서버 스펙 - yum 저장소 정보를 갱신하고 확인한다. yum clean all yum repolist mariadb | 2.9 kB 00:00 mariadb/primary_db | 45 kB 00:02 mariadb MariaDB 492. 패키지 설치 yum으로 설치하는 경우 yum install MariaDB-server MariaDB-client 또는 yum install mysql-server mysql-client 다운로드 받은 rpm 파일로 설치하는 경우 rpm -Uvh MySQL-server-5.x.x-0.i386.rpm rpm -Uvh MySQL-client-5.x.x-0.i386.rpm # 이미 설치된 다른 패키지로 인해 충돌이 날 경우 force option 적용 rpm -Uvh MySQL-server-5.x.x-0.i386.rpm --force rpm -Uvh MySQL-client-5.x.x-0.i386.rpm --force 설치 확인 rpm -qa | grep MariaDB 또는 rpm -qa | grep mysql 기본 데이터 경로 : /var/lib/mysql 기본 로그 파일 경로 : /var/log/mysqld.log 환경설정 파일 경로 : /etc/my.cnf 또는 /etc/my.cnf.d/*.cnf 프로세스 파일 경로 : /var/run/mysqld/mysqld.pid, /var/run/mysqld/mysqld.sock3. 서비스 실행→ 서비스 데몬 구동컴파일 설치컴파일 설치를 위한 패키지 설치yum 사용이 가능한 경우 컴파일 설치를 위한 기본적인 패키지를 설치한다.yum install gcc gcc-c++ libtermcap-devel gdbm-devel zlib* libxml* freetype* libpng* libjpeg* iconv flex gmp ncurses-devel cmake.x86_64 libaio MySQL 8.0 이상인 경우 cmake 3 이상, gcc 5.3 이상이 필요함.1. 소스 파일 다운로드 MariaDB 다운로드 아카이브 https://downloads.mariadb.org/mariadb/+releases/ MySQL 다운로드 아카이브 https://downloads.mysql.com/archives/community/ 다운로드 아카이브에서 원하는 버전의 Source 파일을 서버에 업로드 또는 [wget](https://www.notion.so/CentOS-4ecdbaeac3c5451089130c15a677fcf2)으로 다운로드 받는다. cd /usr/local/src wget https://downloads.mysql.com/archives/get/file/mysql-5.7.20.tar.gz2. 압축 해제 및 빌드 디렉토리 생성tar zxvf mysql-5.7.20.tar.gzmkdir build-mysqlcd build-mysql3. 사용자 생성groupadd mysqluseradd -g mysql mysql4. 컴파일 옵션 설정 컴파일 옵션 변경 시 컴파일 옵션에 -D를 붙이고 값을 입력한다. 한 서버에 2개 이상의 MySQL/MariaDB 설치 시 꼭 다르게 설정해야 할 옵션 설치 베이스 경로 (CMAKE_INSTALL_PREFIX) 데이터 경로 (MYSQL_DATADIR) Sock 파일 위치 (MYSQL_UNIX_ADDR) 포트 (MYSQL_TCP_PORT) my.cnf (INSTALL_SYSCONFDIR) : 설치 후 각각 다른 위치에 생성하여 사용한다. 버전별 테스트한 옵션은 아래와 같다. MariaDB 10.0 MariaDB 10.2 MySQL 5.7 MySQL 8.0 cmake3 \\ -DCMAKE_INSTALL_PREFIX=/usr/local/mysql-8.0 \\ -DMYSQL_DATADIR=/usr/local/mysql-8.0/data \\ -DSYSCONFDIR=/usr/local/mysql-8.0\\ -DMYSQL_USER=mysql \\ -DWITH_MYISAM_STORAGE_ENGINE=1 \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_PARTITION_STORAGE_ENGINE=1 \\ -DWITH_FEDERATED_STORAGE_ENGINE=1 \\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\ -DWITH_MEMORY_STORAGE_ENGINE=1 \\ -DWITH_READLINE=1 \\ -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\ -DMYSOL_TCP_PORT=3306 \\ -DENABLED_LOCAL_INFILE=1 \\ -DENABLE_DOWNLOADS=1 -DWITH_EXTRA_CHARSETS=all \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DWITH_DEBUG=0 \\ -DMYSQL_MAINTAINER_MODE=0 \\ -DDOWNLOAD_BOOST=1 \\ -DWITH_BOOST=/usr/include \\ 컴파일 옵션 확인 ./cmake -LH 컴파일 실패 시 CMakeCache.txt 파일 삭제 rm -rf CmakeCashe.txt5. 컴파일된 파일 설치make &amp;amp;&amp;amp; make install6. 심볼릭 링크 생성 (선택)cd /usr/local/mysql-5.7.20ln -s mysql-5.7.20 mysqlln -s /usr/local/mysql/bin/mysql /usr/bin7. 별도 디렉토리 생성 (선택) 용량 혹은 관리상의 문제로 Data 및 Log 등의 파일을 저장할 별도의 디렉토리가 필요한 경우, 아래와 같이 구성한다. logs : 로그 파일 mysql-data : 데이터 폴더 mysql-ibdata : Innodb 데이터 폴더 tmp : 임시 폴더 명령어 mkdir /data/mariadb cd /data/mariadb mkdir logs mysql-data mysql-ibdata tmp ## 이미 초기 DB를 생성한 경우 cp /var/lib/mysql/* mysql-data chown -R mysql.mysql /data/mariadb8. 환경설정 파일 수정 (선택) 기본 파일 복사 (복사할 my-*.cnf 파일은 MySQL 메모리에 따라 결정된다.) my-huge.cnf : 1-2GB일 경우 my-large.cnf : 512MB 이상일 경우 my-medium.cnf : 32-64MB 사이일 경우 my-small.cnf : 64MB 이하일 경우 cp /usr/local/mysql/support-files/my-huge.cnf /etc/my.cnf 기본 디렉토리에 초기 DB 생성 후 환경설정을 수정하고 관련 파일들을 이동하거나, 환경설정을 먼저 수정하고나서 초기 DB를 생성해도 상관없다. MariaDB/MySQL의 환경설정은 /etc/my.cnf와 [basedir]/my.cnf를 순서대로 탐색하므로,두 개 이상의 DB를 설치할 경우 /etc/my.cnf를 삭제하고, 각 디렉토리 안에 my.cnf를 복사한다. 최적화된my.cnf 샘플 (에러 발생 시 에러 로그를 확인해서 버전에 맞지 않는 항목을 제거한다)9. 초기 DB 생성 및 권한 설정 생성된 MySQL 설치 폴더의 권한을 설정해 준다. chown -R mysql.mysql /usr/local/mysql chmod -R 755 /usr/local/mysql 초기 DB 생성 스크립트를 실행한다. cd /usr/local/mysql-5.7.20/scripts ./mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=[데이터폴더위치] ## 7. 별도 디렉토리 생성을 DB 생성 이후에 했다면 모두 복사해준다. cp -R [현재 데이터 폴더 위치]/* [별도 데이터 폴더 위치] # 예) cp -R /usr/local/mysql/data /data/mariadb/mysql-data/ 초기 DB 생성 후 설치 폴더 및 데이터 폴더에 다시 권한을 설정한다. chown -R mysql.mysql /usr/local/mysql chmod -R 755 /usr/local/mysql chown -R mysql.mysql [데이터폴더위치] chmod -R 755 [데이터폴더위치]10. 서비스 데몬 구동 mysqld_safe을 실행한다. # 컴파일 설치한 경우 bin 폴더 아래에 있는 데몬 실행 cd /usr/local/mysql/bin ./mysqld_safe &amp;amp; # 패키지 설치한 경우 mysqld_safe &amp;amp; 2대 이상의 MySQL을 설치했거나, 별도의 디렉토리로 지정한 경우 옵션을 넣어 실행할 수 있다. ./mysqld_safe &amp;amp; \\ --user=[사용자] \\ --basedir=[설치위치] \\ --datadir=[데이터폴더위치] \\ --log-error=[에러로그위치] \\ --pid-file=[pid파일위치] \\ --socket=[socket파일위치] \\ --port=[포트] 프로세스 확인 ps -ef | grep mysql 정상적으로 구동되지 않을 시 로그를 확인한다. cat /var/log/mysqld.log mysql 콘솔에 접속 # 초기 비밀번호가 설정되지 않은 경우 -p 옵션을 붙이지 않는다. mysql -uroot Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1 Server version: 5.x.x-community-log MySQL Community Edition (GPL) Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the buffer. mysql&amp;gt;11. root 계정 설정 mysqladmin 이용 mysqladmin -u root password &#39;1234&#39; MySQL 5.x update user set password=password(&#39;1234&#39;) where user=&#39;root&#39;; 또는 update user set authentication_string=password(&#39;1234&#39;) where user=&#39;root&#39;; MySQL 5.7 이상 alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;1234; flush privileges;12. 시스템 서비스 등록 컴파일 설치의 경우 시스템 서비스에 직접 등록해야 사용할 수 있다. CentOS 6.x : support-file/mysql.server 파일을 시스템 서비스 폴더에 복사한다. cp /usr/local/mysql/support-file/mysql.server /etc/init.d # 확인 service mysql status CentOS 7.x : 아래 내용의 /usr/lib/systemd/system/mysql.service 파일을 저장한다. vim /usr/lib/systemd/system/mysql.service [Unit] Description=MySQL Community Server After=network.target After=syslog.target [Install] WantedBy=multi-user.target Alias=mysql.service [Service] user=mysql group=mysql # Start main service ExecStart=/usr/local/mysql/bin/mysqld_safe --user=mysql # Give up if ping don&#39;t get an answer TimeoutSec=300 PrivateTmp=false # 시스템 서비스 데몬 Reload systemctl daemon-reloadTroubleShooting 사용자 관련 : root 계정으로 에러 발생 시 권한을 부여한 사용자로 재시도 권한 관련 : socket 파일(보통 /tmp/mysql.sock 또는 /var/run/mysql.sock)에 권한 부여 Socket 지정 : -S 옵션으로 지정 my.cnf 지정 : --defaults-data=[my.cnf위치] 옵션으로 지정서비스 구동 서비스 시작 (서비스 네임 mysql 또는 mysqld 확인) # CentOS 6.x service mysql start # CentOS 7.x systemctl start mysql 부팅시 자동 재시작 # CentOS 6.x chkconfig mysql on chkconfig --list mysql # CentOS 7.x systemctl enable mysql systemctl status mysql (Loaded 맨 마지막에 enabled 확인) 포트 확인 netstat -anp | grep mysql | grep &quot;LISTEN &quot; tcp 0 0 :::3306 :::* LISTEN 9999/mysqld 버전 확인 mysql --version 콘솔 접속 mysql -uroot -p 보안 설정 (선택) mysql_secure_installation 현재 계정 확인 use mysql; // mysql 5.x 는 &quot;password&quot; 또는 &quot;authentication_string&quot;로 확인합니다. mysql&amp;gt; select host, user, password from user; mysql&amp;gt; select host, user, authentication_string from user; // mysql 8.x mysql&amp;gt; select host, user, authentication_string from user;" }, { "title": "마크다운(Markdown) 문법", "url": "/posts/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4(Markdown)-%EB%AC%B8%EB%B2%95/", "categories": "Notes", "tags": "tools, markdown", "date": "2022-05-02 23:25:48 +0900", "snippet": "1. 헤더 (Headers) 큰제목: 문서 제목 This is an H1 ============= This is an H1============= 작은제목: 문서 부제목 This is an H2 ------------- This is an H2————- 글머리: 1~6까지만 지원 # This is a H1## This is a H2### This is a H3#### This is a H4##### This is a H5###### This is a H6 This is a H1 This is a H2 This is a H3 This is a H4 This is a H5 This is a H6 ####### This is a H7(지원하지 않음) 2. 인용 (BlockQuote)이메일에서 사용하는 &amp;gt; 블럭인용문자를 이용한다.&amp;gt; This is a first blockqute.&amp;gt; &amp;gt; This is a second blockqute.&amp;gt; &amp;gt; &amp;gt; This is a third blockqute. This is a first blockqute. &amp;gt; This is a second blockqute. &amp;gt; &amp;gt; This is a third blockqute.이 안에서는 다른 마크다운 요소를 포함할 수 있다. This is a H3 List ``` code ``` 3. 목록● 순서있는 목록(번호)순서있는 목록은 숫자와 점을 사용한다.1. 첫번째2. 두번째3. 세번째 첫번째 두번째 세번째현재까지는 어떤 번호를 입력해도 순서는 내림차순으로 정의된다.1. 첫번째3. 세번째2. 두번째 첫번째 세번째 두번째딱히 개선될 것 같지는 않다. 존 그루버가 신경안쓰고 있다고…● 순서없는 목록(글머리 기호: *, +, - 지원)* 빨강 * 녹색 * 파랑+ 빨강 + 녹색 + 파랑- 빨강 - 녹색 - 파랑 빨강 녹색 파랑 빨강 녹색 파랑 빨강 녹색 파랑 혼합해서 사용하는 것도 가능하다(내가 선호하는 방식)* 1단계 - 2단계 + 3단계 + 4단계 1단계 2단계 3단계 4단계 4. 코드4개의 공백 또는 하나의 탭으로 들여쓰기를 만나면 변환되기 시작하여 들여쓰지 않은 행을 만날때까지 변환이 계속된다.4.1. 들여쓰기This is a normal paragraph: This is a code block.end code block.실제로 적용해보면,적용예:This is a normal paragraph:This is a code block.end code block.***** 한줄 띄어쓰지 않으면 인식이 제대로 안되는 문제가 발생합니다.This is a normal paragraph: This is a code block.end code block.적용예:This is a normal paragraph:This is a code block.end code block.*****4.2. 코드블럭코드블럭은 다음과 같이 2가지 방식을 사용할 수 있습니다: &amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;{code}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 이용방식&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(&quot;Hello, Honeymon&quot;); }}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(&quot;Hello, Honeymon&quot;); }} 코드블럭코드(“```”) 을 이용하는 방법```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(&quot;Hello, Honeymon&quot;); }}```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(&quot;Hello, Honeymon&quot;); }}깃헙에서는 코드블럭코드(“```”) 시작점에 사용하는 언어를 선언하여 문법강조(Syntax highlighting)이 가능하다.```javapublic class BootSpringBootApplication { public static void main(String[] args) { System.out.println(&quot;Hello, Honeymon&quot;); }}```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(&quot;Hello, Honeymon&quot;); }}5. 수평선 &amp;lt;hr/&amp;gt;아래 줄은 모두 수평선을 만든다. 마크다운 문서를 미리보기로 출력할 때 페이지 나누기 용도로 많이 사용한다.* * *********- - ---------------------------------------- 적용예 * 6. 링크 참조링크[link keyword][id][id]: URL &quot;Optional Title here&quot;// codeLink: [Google][googlelink][googlelink]: https://google.com &quot;Go google&quot;Link: Google 외부링크 사용문법: [Title](link)적용예: [Google](https://google.com, &quot;google link&quot;) Link: Google 자동연결```일반적인 URL 혹은 이메일주소인 경우 적절한 형식으로 링크를 형성한다. 외부링크: http://example.com/ 이메일링크: address@example.com``` 외부링크: http://example.com/ 이메일링크: address@example.com7. 강조*single asterisks*_single underscores_**double asterisks**__double underscores__~~cancelline~~ single asterisks single underscores double asterisks double underscores cancelline 문장 중간에 사용할 경우에는 **띄어쓰기** 를 사용하는 것이 좋다.문장 중간에 사용할 경우에는 띄어쓰기를 사용하는 것이 좋다.8. 이미지![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)사이즈 조절 기능은 없기 때문에 &amp;lt;img width=&quot;&quot; height=&quot;&quot;&amp;gt;&amp;lt;/img&amp;gt;를 이용한다.예&amp;lt;img src=&quot;/path/to/img.jpg&quot; width=&quot;450px&quot; height=&quot;300px&quot; title=&quot;px(픽셀) 크기 설정&quot; alt=&quot;RubberDuck&quot;&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;img src=&quot;/path/to/img.jpg&quot; width=&quot;40%&quot; height=&quot;30%&quot; title=&quot;px(픽셀) 크기 설정&quot; alt=&quot;RubberDuck&quot;&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;/img&amp;gt;9. 줄바꿈3칸 이상 띄어쓰기( )를 하면 줄이 바뀐다.* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다.이렇게* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다.___\\\\ 띄어쓰기이렇게 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게 " }, { "title": "jekyll/Chripy로 GitHub Pages 만들기", "url": "/posts/jekyll-Chirpy%EB%A1%9C-GitHub-Pages-%EB%A7%8C%EB%93%A4%EA%B8%B0/", "categories": "GitHub, GitHub-Pages", "tags": "jekyll, chirpy, github-pages", "date": "2022-05-01 01:11:11 +0900", "snippet": "Chirpy 가져오기 Chirpy 저장소의 Release에서 소스를 다운로드하거나 Chirpy 저장소를 Fork 합니다.이 중 하나의 방법을 선택하여 진행하시기 바랍니다.1. 소스 다운로드한 경우 GitHub에서 내 계정의 새 저장소를 생성합니다. Repository Name은 &amp;lt;자신의 GitHub 계정명&amp;gt;.github.io로 설정하여 생성합니다. Repository 유형은 Public으로 합니다. Initialize this repository with:에서 Add a README file은 체크 해제하여 branch를 생성하지 않도록 합니다. Latest Release 버전의 소스 파일 Source code (zip)을 로컬 환경에 다운로드 후 압축을 해제합니다. 터미널로 해당 폴더에 접속합니다. .gitignore 파일에 제외할 파일을 추가해줍니다. echo &quot;Gemfile.lock&quot; &amp;gt;&amp;gt; .gitignore 해당 폴더를 git 저장소로 생성합니다. git init 생성한 GitHub 저장소로 원격 연결합니다. git remote add origin https://github.com/&amp;lt;GitHub 계정명&amp;gt;/&amp;lt;GitHub 계정명&amp;gt;.github.io.git main branch를 생성하고 압축 해제된 파일들을 commit합니다. git branch -M main git add . git commit -m &quot;Initial commit&quot; 2. Fork한 경우 Chirpy 저장소의 소스를 내 계정에서 생성한 저장소로 Fork 합니다. 이 때, Repository Name은 &amp;lt;자신의 GitHub 계정명&amp;gt;.github.io로 설정하여 생성합니다. 다른 이름으로 설정한 경우에도 해당 저장소의 Settings 페이지로 이동하여 Repository Name을 변경하여 Rename 할 수 있습니다. 방금 Fork하여 생성한 저장소를 로컬에 Clone 합니다. git clone https://github.com/&amp;lt;GitHub 계정명&amp;gt;/&amp;lt;GitHub 계정명&amp;gt;.github.io.git Chirpy 초기화해당 폴더에서 아래 명령어를 실행합니다. 성공하여 아래 메시지가 나오면 자동으로 commit 됩니다.sh tools/init.sh [INFO] Initialization successful!(선택) 로컬 설치 및 실행로컬에서 미리보기 등 직접 작동이 가능한 환경을 설정하기 위해서는 ruby와 jekyll을 설치해야 합니다.블로그 포스트를 위한 .md 파일 작성 이외에도 로컬에서 작동하여 사용하려면 아래와 같이 직접 로컬 서버를 가동하여 사용하시기 바랍니다.ruby, bundler, jekyll 설치Windows Ruby Installer 설치 : 홈페이지에서 다운로드 후 설치 설치된 프로그램 중 Start Command Prompt with Ruby를 실행합니다. gem 명령어를 통해 jekyll과 패키지들을 설치합니다. gem install jekyllgem install minimagem install bundlergem install jekyll-feedgem install tzinfo-data MacOS HomeBrew로 ruby 설치 brew install ruby Bundler, jekyll 설치 gem install --user-install bundler jekyll 환경변수 설정 # ruby 버전 확인ruby -v# 확인한 ruby 버전의 처음 두 숫자를 아래 X.X에 넣음echo &#39;export PATH=&quot;$HOME/.gem/ruby/X.X.0/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc 의존성 모듈 설치해당 폴더로 돌아와서 jekyll을 로컬에서 실행하기 위해 ruby의 의존성 모듈을 설치합니다.bundlejekyll 실행아래 명령어로 jekyll을 실행합니다.jekyll servejekyll을 설치하지 않았거나 실행되지 않는 경우 아래 명령어로 실행합니다.bundle exec jekyll s또는 Docker로 실행합니다.docker run -it --rm \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ -p 4000:4000 jekyll/jekyll \\ jekyll serve로컬 사이트 접속정상적으로 사이트 배포 시 http://localhost:4000로 접속하여 확인합니다.Workflow 권한 수정Github Pages에서 jekyll 설치 및 작동할 때는 Github Action의 workflow가 사용되므로 권한을 수정해줍니다. 해당 Github 저장소의 Settings 탭 &amp;gt; Actions &amp;gt; General 페이지에 접속합니다. Workflow permissions를 Read and write permissions로 바꾸고 Save 합니다._config.yml 수정_config.yml 파일을 수정하여 사이트에 대한 환경설정을 진행합니다.필수로 수정을 권하는 항목은 아래와 같습니다. lang : ko-KR timezone : Asia/Seoul url : https://&amp;lt;GitHub 계정명&amp;gt;.github.io배포아래 명령어를 실행하여 commit 및 push를 진행합니다.git add -Agit commit -m &quot;Update configure&quot;git pushGitHub Actions 해당 GitHub 저장소의 Actions 탭에서 진행과정을 확인합니다.Push를 하게 되면 GitHub Action은 Workflow를 통해 자동으로 Build 및 Deployment를 진행합니다. (3~5분 정도 소요) 정상적으로 완료된 경우 초록색의 완료 뱃지 아이콘을 확인할 수 있으며, gh-pages라는 branch를 자동으로 생성합니다.Branch 변경main branch로 push되는 소스를 build하여 gh-pages에 deployment 하므로 사이트 배포를 위한 branch를 gh-pages로 변경해야 합니다.해당 GitHub 저장소의 Settings 탭 &amp;gt; Pages 페이지에서 Source를 main(또는 master)에서 gh-pages로 변경 후 Save 합니다.다시 한 번 build 및 deployment가 진행되고 사이트가 배포됩니다.사이트 접속https://&amp;lt;GitHub 계정명&amp;gt;.github.io에 접속하여 사이트가 정상적으로 배포된 것을 확인합니다.참조 Chirpy Jekyll Theme 하얀눈길 블로그 Zinu’s Blog" }, { "title": "NUGALOG 정착기", "url": "/posts/NUGALOG-%EC%A0%95%EC%B0%A9%EA%B8%B0/", "categories": "Notes", "tags": "tools, platform", "date": "2022-04-30 02:12:00 +0900", "snippet": "기록과 정리내가 집착하리만큼 놓지 못하는 몇 가지 삶의 습관 중에 기록과 정리가 있다. ‘기록과 정리’는 그 과정과 결과를 통해 얻는 것이 뚜렷하다. 요즘과 같은 정보의 바다에서 누구나 원하는 자료를 이전보다 쉽게 얻을 수 있다. 하지만 얻은 내용을 한 번 더 ‘정리’하는 사람은 단순히 습득한 정보를 논리적으로 사고(思考)하여 재정의한다. 이를 키보드나 펜을 통해 다시 ‘기록’하는 과정을 겪음으로써 단순히 눈으로만 입력했던 ‘단기 기억’은 새로운 사고와 촉감을 통해 ‘장기 기억’으로 전환된다.나는 학창시절의 노트 정리부터 내가 겪은 각종 삶의 양식에 대한 기록물들을 갖고 있다. 하루의 기록인 일기부터 작은 메모들, 스크랩한 내용들, 내가 만든 문서와 디자인 결과물들, 각종 음악과 사진, 영상, 프로그램 등 데이터들을 끊임없이 저장하고 정리한다. 급하게 필요한 정보를 찾아야 할 때도 유용하고, 가끔 꺼내어 읽을 때에도 스스로 피드백하며 성장할 수 있는 과정을 이끌어 내게 한다. 가장 소중한 자산이자, ‘나의 역사’가 되었다.개발과 기록2019년 본격적으로 개발을 시작했다. 짧지만 내가 느낀 이 세계는 ‘구조 분석 능력’과 ‘문제 해결 능력’을 바탕으로 실력을 인정받는다. 빠르게 분석하고 문제를 해결해야 하는데 최단시간에 효율적으로 결과를 도출해낼 수 있는 ‘각종 스킬’이 필요하다. 그 중에서도 ‘정보 검색 능력’은 빠질 수 없는 주요 스킬이다. 이 때 막연히 Google, Stack Overflow에서 검색하기 보다는 나만의 데이터 기록물에서 먼저 검색해보는 것은 ‘정보 검색 능력’의 효율을 극단적으로 높여준다. 내가 직접 겪었던 상황과 시행착오를 겪었던 내용이 정리되어 언제나 참고할 수 있는 그런 기록들일 것이다. 내가 가장 신뢰할 수 있는 나만의 데이터 자산이 있다는 것은 큰 강점이 아닐 수 없다.개발을 하면서도 ‘기록과 정리’를 한 시도 쉰 적은 없다. 보이는 대로 스크랩하고 남은 시간에 정리하며 내 자산을 만들어왔다. 그 어느 분야보다 급격하게 변화하고 유행이 바뀌는 분야이다. 스크랩할 데이터도, 시행착오하며 정리한 매뉴얼도, 각종 테크 이슈들도 굉장히 양이 많은 분야이다. 이렇게 다양한 내용을 기록하다보니 기록할 매체와 플랫폼이 중요해졌다. 게다가 이러한 인식을 나보다 더 치열하게 해준 천재들이 여러가지 생산성 도구를 앞다투어 내준 덕에 정말 좋은 기능의 도구들이 많아졌다.플랫폼 찾기여러 플랫폼에서 시행착오를 하며 파편화된 기록들을 모으고 재정리 하는 데에 너무 많은 에너지를 소비했다. 이제는 나름의 기준을 두고 제대로 선정하여 정착해야겠다는 생각이 들었다. 마크다운을 지원한다. 웹페이지 스크랩 도구가 있어야 한다. 스크랩부터 정리 및 매뉴얼 작성까지는 오랜 시간이 걸릴 수 있음을 감안해, 스크랩용과 배포용으로 분리한다. 배포용 플랫폼은 검색 및 조회수를 통해 수익 창출이 가능해야 한다. 정착위와 같은 기준을 통해 정착한 플랫폼은 아래와 같다. 스크랩 후 빠른 정리 : Notion - 스크랩 확장프로그램, 쉬운 마크다운 지원 기술 공유 및 매뉴얼 작성 : GitHub Pages - 마크다운 지원, 구글 애드센스 가능NotionNotion은 개발 스크랩 외에도 각종 기록과 메모 용도로 사용하던 중이었다. 이미 Evernote, OneNote, Craft 등을 사용하다가 넘어왔기에 다른 플랫폼보다 장점이 더 많다고 인식했다. 웹페이지 스크랩이 가능한 크롬 확장프로그램이 있어 클릭 한 번으로 스크랩이 가능했고, 플랫폼 자체가 Web 형식이어서 쉽게 웹페이지로 공유가 가능했기 때문에 계속 사용하기로 했다.GitHub PagesGitHub Pages는 기존에 사용하던 ‘글 쓰기’ 용도의 Tistory 블로그에서 분리하여 기술 공유 및 매뉴얼을 작성하기 위해 선정했다. Medium, Velog, 브런치 등 다른 대안도 있었으나 기준에 적합하지 않았다. Ruby 기반의 jekyll을 사용하여 구축했고, 이번 기회에 GitHub Action에 대해 파악해보기로 했다. 그 동안 Notion에서 제공하는 쉬운 마크다운에 익숙해졌기에 마크다운 문법 습득을 더욱 완벽히 해보기로 했고, Git 사용도 생활화 하기로 했다.마무리짧은 몇 줄의 기록이 모이고 정리 되어 하나의 글, 매뉴얼이 되면 그 자체로 가치가 있는 데이터가 될 수 있다. 앞으로도 계속될 개발 기록의 여정을 통해 어떤 후배, 후임에게라도 좋은 교육 자료가 될 수 있을 정도로 체계적인 정보들을 남기고 싶다. 물론 이 치열한 ‘기록과 정리’의 가장 큰 수혜자는 바로 ‘나’일 것이다." } ]
